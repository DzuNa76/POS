import 'package:flutter/material.dart';
import 'package:pos/data/repositories/item_repository.dart';
import 'package:provider/provider.dart';
import 'package:pos/presentation/providers/app_state.dart';

class SplashScreen2 extends StatefulWidget {
  const SplashScreen2({Key? key}) : super(key: key);

  @override
  State<SplashScreen2> createState() => _SplashScreen2State();
}

class _SplashScreen2State extends State<SplashScreen2> {
  int _loadedItems = 0;
  int _totalItems = 0;
  final int _maxLoadItems = 2000;
  final int _batchSize = 500;

  @override
  void initState() {
    super.initState();
    _initDataFetch();
  }

  Future<void> _initDataFetch() async {
    try {
      final itemRepository =
          Provider.of<ItemRepository>(context, listen: false);

      final localItemCount = await itemRepository.getLocalItemCount();
      debugPrint('Local item count: $localItemCount');

      if (localItemCount >= _maxLoadItems) {
        setState(() {
          _totalItems = localItemCount;
          _loadedItems = localItemCount;
        });

        Provider.of<AppState>(context, listen: false).setDataReady(true);

        if (mounted) {
          Navigator.pushReplacementNamed(context, '/kasir');
        }

        return;
      }

      setState(() => _totalItems = _maxLoadItems);

      await itemRepository.fetchItemsWithProgress(
        totalItems: _maxLoadItems,
        batchSize: _batchSize,
        onProgressUpdate: (fetched) {
          setState(() => _loadedItems = fetched);
        },
      );

      Provider.of<AppState>(context, listen: false).setDataReady(true);

      if (mounted) {
        Navigator.pushReplacementNamed(context, '/kasir');
      }
    } catch (e) {
      _showErrorSnackBar(e.toString());
    }
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $message')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    double totalProgress =
        _maxLoadItems > 0 ? (_loadedItems / _maxLoadItems) : 0.0;

    return Scaffold(
      backgroundColor: Colors.white,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Total Item di API: $_totalItems',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            CircularProgressIndicator(value: totalProgress),
            const SizedBox(height: 8),
            Text(
              'Memuat $_loadedItems/$_maxLoadItems item...',
              style: Theme.of(context).textTheme.titleMedium,
            ),
          ],
        ),
      ),
    );
  }
}
